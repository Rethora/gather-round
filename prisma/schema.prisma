// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RsvpStatus {
  PENDING
  MAYBE
  YES
  NO
}

enum NotificationType {
  EVENT_UPDATE
  EVENT_CANCELED
  NEW_RSVP
  RSVP_UPDATED
  NEW_MENTION
  COMMENT
}

model User {
  id             String    @id
  email          String    @unique
  hashedPassword String
  name           String?
  sessions       Session[]
  Rsvp           Rsvp[]
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Event {
  id           String         @id @default(cuid())
  title        String
  description  String?
  dateTime     DateTime
  location     String
  maxGuests    Int
  imageUrl     String?
  isPrivate    Boolean
  isCanceled   Boolean        @default(false)
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  rsvps        Rsvp[]
  comments     Comment[]
  Notification Notification[]

  @@index([dateTime, userId])
}

model Rsvp {
  id        String     @id @default(cuid())
  status    RsvpStatus @default(PENDING)
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId   String
  userId    String
  invitee   User       @relation(fields: [inviteeId], references: [id])
  inviteeId String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([eventId, inviteeId])
  @@index([userId])
}

model Comment {
  id           String         @id @default(cuid())
  content      String
  event        Event          @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId      String
  userId       String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  mentions     Mention[]
  Notification Notification[]

  @@index([userId])
}

model Mention {
  id              String   @id @default(cuid())
  mentionedUserId String
  comment         Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId       String
  userId          String
  createdAt       DateTime @default(now())

  @@index([userId])
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  isRead    Boolean          @default(false)
  event     Event?           @relation(fields: [eventId], references: [id])
  eventId   String?
  comment   Comment?         @relation(fields: [commentId], references: [id])
  commentId String?
  userId    String
  createdAt DateTime         @default(now())

  @@index([userId, createdAt])
}
